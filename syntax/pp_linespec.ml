open Linespec
open Camlp4.PreCast
open Syntax
open Ast

let parse_file file =
  let ic, close = match file with
    | "-" -> stdin, ignore
    | f   -> open_in f, close_in in
  let result = Gram.parse
                 l_linespec_eoi (Loc.mk file) (Stream.of_channel ic) in
    close ic;
    result

let progname = match Array.length Sys.argv with
 | 0 -> "-unknown-"
 | _ -> Sys.argv.(0)

let print_warning () =
  print_string "(*\n";
  print_string " * WARNING: Do not modify this file.\n";
  print_string " * It was generated by ";
    print_string progname; print_newline ();
  print_string " *)\n\n"

open Arg

(*
 * We're always in an "interactive" system now, because I can't figure out
 * how to load camlp4 without loading toplevellib.cma.
 *)
(*
if not !Sys.interactive then
*)
  let do_intf file = print_warning ();
                     print_doc_sig
                       (doc_sig_of_linespec (parse_file file)) in
  let do_impl file = print_warning ();
                     print_str (ml_of_linespec (parse_file file)) in
  let do_data file = print_str (data_of_linespec (parse_file file)) in
  let action       = ref do_impl in
  let anon file    = !action file in
  let set_intf ()  = action := do_intf in
  let set_impl ()  = action := do_impl in
  let set_data ()  = action := do_data in
  let usage_message = "Usage: " ^ progname ^ " [OPTION...] [--] [FILE...]" in
  let args   = align
    [ "-intf", Unit set_intf, " Generate signature";
      "-impl", Unit set_impl, " Generate structure";
      "-data", Unit set_data, " Generate metadata structure";
      "--",    Rest anon,     " Stop processing options"; ] in
  try
    parse args anon usage_message
  with
  | Bad s  -> prerr_string s; exit 1
  | Help s -> usage args usage_message; exit 0
  | Loc.Exc_located (loc, e)
           -> Loc.print Format.err_formatter loc;
              prerr_string ":\n";
              prerr_string (Printexc.to_string e);
              prerr_newline ();
              exit 2
