open Linespec
open MLast

let parse_file file =
  let ic, close = match file with
    | "-" -> stdin, ignore
    | f   -> open_in f, close_in in
  let result = Gram.Entry.parse l_linespec_eoi
                 (Gram.parsable (Stream.of_channel ic)) in
    close ic;
    result

let progname = match Array.length Sys.argv with
 | 0 -> "-unknown-"
 | _ -> Sys.argv.(0)

let print_warning () =
  print_string "(*\n";
  print_string " * WARNING: Do not modify this file.\n";
  print_string " * It was generated by ";
    print_string progname; print_newline ();
  print_string " *)\n\n"

let print_sig = function
  | MtSig (loc, items) ->
      print_warning ();
      !Pcaml.print_interf (List.map (fun item -> item, loc) items)
  | _ -> failwith "Unexpected (1)"

let print_str = function
  | MeStr (loc, items) ->
      print_warning ();
      !Pcaml.print_implem (List.map (fun item -> item, loc) items)
  | _ -> failwith "Unexpected (2)"

open Arg

if not !Sys.interactive then
  let do_intf file = print_warning ();
                     print_doc_sig
                       (doc_sig_of_linespec (parse_file file)) in
  let do_impl file = print_str (ml_of_linespec (parse_file file)) in
  let do_data file = print_str (data_of_linespec (parse_file file)) in
  let action       = ref do_impl in
  let anon file    = !action file in
  let set_intf ()  = action := do_intf in
  let set_impl ()  = action := do_impl in
  let set_data ()  = action := do_data in
  let usage_message = "Usage: " ^ progname ^ " [OPTION...] [--] [FILE...]" in
  let args   = align
    [ "-intf", Unit set_intf, " Generate signature";
      "-impl", Unit set_impl, " Generate structure";
      "-data", Unit set_data, " Generate metadata structure";
      "--",    Rest anon,     " Stop processing options"; ] in
  try
    parse args anon usage_message;
  with
  | Bad s  -> prerr_string s; exit 1
  | Help s -> usage args usage_message; exit 0
  | Stdpp.Exc_located ((l1, l2), e)
           -> prerr_string "Standard input, line ";
              prerr_int l1.Lexing.pos_lnum;
              prerr_string ", characters ";
              prerr_int (l1.Lexing.pos_cnum - l1.Lexing.pos_bol);
              prerr_string " to ";
              prerr_int (l2.Lexing.pos_cnum - l1.Lexing.pos_bol);
              prerr_string ":\n";
              prerr_string (Printexc.to_string e);
              prerr_newline ();
              exit 2
